#!/usr/bin/env python2

from math import *

import rospy
from nav_msgs.msg import Path
from geometry_msgs.msg import PoseStamped
from contrail_msgs.msg import WaypointList

from breadcrumb.srv import RequestPath
from breadcrumb.srv import RequestPathRequest

global pub_path
global srvc_bc

def e_to_q(roll,pitch,yaw):
	cy = cos(yaw * 0.5);
	sy = sin(yaw * 0.5);
	cr = cos(roll * 0.5);
	sr = sin(roll * 0.5);
	cp = cos(pitch * 0.5);
	sp = sin(pitch * 0.5);

	w = cy * cr * cp + sy * sr * sp;
	x = cy * sr * cp - sy * cr * sp;
	y = cy * cr * sp + sy * sr * cp;
	z = sy * cr * cp - cy * sr * sp;

	return (w,x,y,z)

def callback_wp(msg_in):
	global pub_path
	global srvc_bc

	# Make sure it is a valid waypoint message
	if (msg_in.header.stamp > rospy.Time(0)) and (len(msg_in.waypoints) > 0):
		msg_out = Path()
		msg_out.header = msg_in.header

		rospy.loginfo("Converting %i waypoints to path" % (len(msg_in.waypoints)))

		for i in range(len(msg_in.waypoints) - 1):
			#Request a path from breadcrumb
			req = RequestPathRequest()

			req.start.x = msg_in.waypoints[i].position.x
			req.start.y = msg_in.waypoints[i].position.y
			req.start.z = msg_in.waypoints[i].position.z
			req.end.x = msg_in.waypoints[i+1].position.x
			req.end.y = msg_in.waypoints[i+1].position.y
			req.end.z = msg_in.waypoints[i+1].position.z

			res = self.srvc_bc(req)

			if len(res.path.poses) > 0:
				# Instert the path recieved from breadcrumb
				for sp in res.path.poses:
					p = PoseStamped()
					p.header = res.path.header
					p.pose.position = sp.position
					p.pose.orientation = e_to_q(0.0, 0.0, msg_in.waypoints[i].yaw)
					msg_out.poses.append(p)
			else:
				rospy.logerr("Breadcrumb could not solve %i to %i!" % (i, i+1))

		rospy.loginfo("[NAV] Path planned, transmitting")
		pub_path.publish(msg_out)

def waypoint_converter():
	global pub_path
	global srvc_bc

	rospy.init_node('converter_waypoint_path', anonymous=True)
	sub_wayp = rospy.Subscriber('~waypoints', WaypointList, callback_wp)
	pub_path = rospy.Publisher('~path', Path, queue_size=10, latch=True)

	rospy.loginfo("[NAV] Waiting to connect with Breadcrumb")
	rospy.wait_for_service('~request_path')
	srvc_bc = rospy.ServiceProxy('~request_path', RequestPath)

	rospy.loginfo("Waypoint-Path converter running")

	rospy.spin()

if __name__ == '__main__':
	try:
		waypoint_converter()
	except rospy.ROSInterruptException:
		pass
